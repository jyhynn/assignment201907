<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<bean id="loginSuccessHandler" class="com.spring.security.LoginSuccessHandler"/>
	<bean id="loginFailureHandler" class="com.spring.security.LoginFailureHandler"/>
	<bean id="logoutHandler" class="com.spring.security.LogoutHandler"/>
	
	<security:http auto-config="true" use-expressions="true"> 
		<!-- to assist in protecting their application -->
		<security:headers disabled="true"/>
		<!-- error-if-maximum-exceeded : 첫 번째 로그인한 세션을 유지하고 두 번째 중복 로그인한 세션을 막기 -->
		<security:session-management invalid-session-url="/">
            <security:concurrency-control max-sessions="1" 
            							  expired-url="/login" 
            							  error-if-maximum-exceeded="false" />
        </security:session-management>
		<security:intercept-url pattern="/board/**" 
								access="hasAnyRole('ROLE_USER','ROLE_ADMIN') and fullyAuthenticated" />
		<security:intercept-url pattern="/**" 
								access="permitAll" />
		<security:form-login username-parameter="mem_id" 
							 password-parameter="mem_pwd" 
							 login-page="/home"
							 default-target-url="/board/boardList"
							 authentication-success-handler-ref="loginSuccessHandler"
							 authentication-failure-handler-ref="loginFailureHandler"/>
		<security:logout success-handler-ref="logoutHandler"/>
		<security:access-denied-handler error-page="/login_denied" />
	</security:http>
	
	<security:authentication-manager>
		<security:authentication-provider user-service-ref="customUserDetailsService" />
	</security:authentication-manager>
	
<!-- 
	<security:password-encoder ref="bcryptPasswordEncoder"/> 
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	사용자 정보를 DB에 넣을 때 bcrypt로 암호화해서 집어넣어야 의미가 있음
			
	 JSESSIONID 쿠키를 명시적으로 삭제하지 않아도 됨. JSESSIONID 쿠키는 Spring Security가 관리하는 
	것이 아니라, 서블릿 컨테이너에 의해 관리되기 때문. 따라서 로그아웃을 하면 시큐리티에서 기본적으로 http 세션을 무효화하게 되면, 
	서블릿 컨테이너가 JSESSIONID 쿠키를 제거. 따라서 쿠키에 의해 기억할 것이 있으냐 없느냐에 따라 설정됨. remember-me 
	기능을 사용할 때는 쿠키를 삭제해야 할 것.
	
	<session-fixation-protection>
	1. none : 세션고정보호를 사용하지 않는다.
	2. migrateSession : 사용자가 인증되면 새로운 세션이 할당되고 기존 세션의 모든 어트리뷰트가 새로운 세션으로 이동한다.
	3. newSession : 사용자가 인증된 경우 새로운 세션이 생성되고 기존(인증되지 않은) 세션의 어트리뷰트는 새로운 세션으로 하나도 옮겨지지 않는다
	
	<headers>
	1. Cache Control : 브라우저가 웹페이지 컨텐츠를 캐싱하지 않도록
	2. Content Type Options : 컨텐츠 스니핑 방지
	3. HTTP Strict Transport Security (HSTS) : https를 붙이지 않고 접속해도 https로 접속되도록
	4. X-Frame-Options : DENY 설정 시 웹브라우저는 프레임 내부에서 페이지가 렌더링되는 것을 방지
	5. X-XSS-Protection : 웹브라우저의 내장 XSS Filter를 사용
	6. CONTENT-SECURITY-POLICY : 스크립트를 허용할 URL(신뢰할 수 있는 URL)을 헤더에 설정
	 -->
</beans>
